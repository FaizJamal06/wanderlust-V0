<% layout('layouts/boilerplate') -%>
<style>
  /* Enhanced Filters responsive layout */
  #filters {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    align-items: center;
    margin-bottom: 20px;
    padding: 10px 0;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }

  #filters .filter {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 12px 16px;
    border-radius: 12px;
    margin: 0;
    opacity: 0.85;
    min-width: 80px;
    min-height: 80px;
    text-align: center;
    transition: all 0.2s ease;
    text-decoration: none;
    border: 2px solid transparent;
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(10px);
    flex-shrink: 0;
  }

  #filters .filter:hover {
    opacity: 1;
    cursor: pointer;
    transform: translateY(-2px);
    background: rgba(177,151,252,0.1);
    border-color: rgba(177,151,252,0.3);
  }

  /* active state for selected filter */
  #filters .filter.active {
    background: rgba(177,151,252,0.15);
    border-color: #B197FC;
    box-shadow: 0 4px 12px rgba(177,151,252,0.2);
    opacity: 1;
    transform: translateY(-2px);
  }

  #filters .filter i {
    font-size: 1.4rem;
    line-height: 1;
    margin-bottom: 8px;
  }

  #filters .filter p {
    margin: 0;
    font-size: 0.8rem;
    font-weight: 500;
    color: #333;
    text-decoration: none;
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    #filters {
      gap: 6px;
      margin-bottom: 16px;
      padding: 8px 0;
    }
    
    #filters .filter {
      min-width: 70px;
      min-height: 70px;
      padding: 10px 12px;
    }
    
    #filters .filter i {
      font-size: 1.2rem;
      margin-bottom: 6px;
    }
    
    #filters .filter p {
      font-size: 0.75rem;
    }
  }

  @media (max-width: 480px) {
    #filters {
      gap: 4px;
      justify-content: flex-start;
      padding-bottom: 8px;
    }
    
    #filters .filter {
      min-width: 65px;
      min-height: 65px;
      padding: 8px 10px;
    }
    
    #filters .filter i {
      font-size: 1.1rem;
      margin-bottom: 4px;
    }
    
    #filters .filter p {
      font-size: 0.7rem;
    }
  }

  /* Horizontal scroll indicator for filters on mobile */
  @media (max-width: 768px) {
    #filters::after {
      content: '';
      position: absolute;
      right: 0;
      top: 0;
      bottom: 0;
      width: 20px;
      background: linear-gradient(to right, transparent, rgba(255,255,255,0.8));
      pointer-events: none;
    }
    
    #filters {
      position: relative;
      scrollbar-width: none;
      -ms-overflow-style: none;
    }
    
    #filters::-webkit-scrollbar {
      display: none;
    }
  }

  /* when JS hides .col via inline style, ensure no unexpected spacing remains */
  .row > .col[style*="display: none"] {
    display: none !important;
  }
</style>

<div id="filters" data-active-category="<%= activeCategory ? activeCategory : '' %>">
  <a class="filter" href="/listings?category=<%= encodeURIComponent('Trending') %>" data-label="Trending">
    <div><i class="fas fa-fire" style="color: #B197FC;"></i></div>
    <p>Trending</p>
  </a>
  <a class="filter" href="/listings?category=<%= encodeURIComponent('Rooms') %>" data-label="Rooms">
    <div><i class="fa-solid fa-bed" style="color: #B197FC;"></i></div>
    <p>Rooms</p>
  </a>
  <a class="filter" href="/listings?category=<%= encodeURIComponent('Penthouse') %>" data-label="Penthouse">
    <div><i class="fas fa-building" style="color: #B197FC;"></i></div>
    <p>Penthouse</p>
  </a>
  <a class="filter" href="/listings?category=<%= encodeURIComponent('Beaches') %>" data-label="Beaches">
    <div><i class="fas fa-umbrella-beach" style="color: #B197FC;"></i></div>
    <p>Beaches</p>
  </a>
  <a class="filter" href="/listings?category=<%= encodeURIComponent('Cabins') %>" data-label="Cabins">
    <div><i class="fas fa-campground" style="color: #B197FC;"></i></div>
    <p>Cabins</p>
  </a>
</div>

<div class="row row-cols-1 row-cols-sm-2 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 mt-3">
  <% for(let listing of allListings) { %>
    <div class="col">
        <a href="/listings/<%= listing._id %>" class="text-decoration-none text-reset d-block">
          <% /* expose the category on the card root for client-side filtering */ %>
          <div class="card mb-3" data-category="<%= listing.category || 'Trending' %>">
  <% let imgSrc = '/images/placeholder.png'; %>
  <% if (listing.image && listing.image.url) { imgSrc = listing.image.url; } else if (listing.image && listing.image.filename) { imgSrc = '/uploads/' + listing.image.filename; } %>
  <img src="<%= imgSrc %>" class="card-img-top" alt="listing image">
        <div class="card-body">
          <h5 class="card-title"><%= listing.title %></h5>
          <p class="card-text">
            <small class="text-muted">
              <i class="fas fa-map-marker-alt"></i> 
              <%= listing.location %>, <%= listing.country %>
            </small>
          </p>
          <p class="card-text">
            â‚¹<%= listing.price %>/night
          </p>
              <span class="btn btn-primary">View Details</span>
        </div>
      </div>
        </a>
    </div>
  <% } %>
</div>
<script>
  (function(){
  const filters = Array.from(document.querySelectorAll('#filters .filter'));
  const cards = Array.from(document.querySelectorAll('.card[data-category]'));
  const activeCategory = document.getElementById('filters')?.dataset?.activeCategory || '';

    // initialize active state from server if provided (match by data-label)
    if (activeCategory) {
      filters.forEach(f => {
        const label = f.dataset.label || (f.querySelector('p') && f.querySelector('p').textContent.trim());
        if (label === activeCategory) f.classList.add('active');
      });
    }

    // helper to show/hide cards client-side
    function applyClientFilter(label) {
      // Hide/show the parent column (.col) so the grid reflows correctly
      cards.forEach(c => {
        const col = c.closest('.col');
        const cat = (c.dataset.category || '').trim();
        if (!col) return;
        if (!label) {
          col.style.display = '';
        } else {
          col.style.display = (cat === label) ? '' : 'none';
        }
      });
    }

    // Update URL without reload (so pagination/useful links still reflect state)
    function pushCategoryToUrl(label) {
      try {
        const url = new URL(window.location.href);
        if (!label) {
          url.searchParams.delete('category');
          url.searchParams.delete('page'); // reset to first page
        } else {
          url.searchParams.set('category', label);
          url.searchParams.delete('page');
        }
        history.pushState({}, '', url.toString());
      } catch (e) {
        // ignore if URL API not available
      }
    }

    filters.forEach(f => {
      // ensure accessibility attributes for both <a> and non-js fallbacks
      if (!f.hasAttribute('role')) f.setAttribute('role', 'button');
      if (!f.hasAttribute('tabindex')) f.setAttribute('tabindex', '0');
      const label = f.dataset.label || (f.querySelector('p') && f.querySelector('p').textContent.trim());

      f.addEventListener('click', (ev) => {
        // if user wants the native link behavior (middle-click / cmd/ctrl), let it happen
        if (ev.defaultPrevented || ev.metaKey || ev.ctrlKey || ev.shiftKey || ev.altKey || ev.button === 1) return;
        ev.preventDefault();
        // toggle behavior: if already active, clear filter
        if (f.classList.contains('active')) {
          filters.forEach(x => x.classList.remove('active'));
          applyClientFilter(null);
          pushCategoryToUrl(null);
        } else {
          filters.forEach(x => x.classList.remove('active'));
          f.classList.add('active');
          applyClientFilter(label);
          pushCategoryToUrl(label);
        }
      });

      f.addEventListener('keydown', (ev) => {
        if (ev.key === 'Enter' || ev.key === ' ') {
          ev.preventDefault();
          f.click();
        }
      });
    });

    // If server rendered an active category, apply client filter immediately
    if (activeCategory) applyClientFilter(activeCategory);
  })();
</script>
<% if (typeof pagination !== 'undefined' && pagination.totalPages > 1) { %>
  <nav aria-label="Listings pagination" class="mt-3">
    <ul class="pagination justify-content-center">
      <% const current = pagination.page; const totalPages = pagination.totalPages; const qCategory = activeCategory ? `category=${encodeURIComponent(activeCategory)}` : ''; const baseHref = '/listings' + (qCategory ? ('?' + qCategory + '&') : '?'); %>
      <li class="page-item <%= current <= 1 ? 'disabled' : '' %>">
        <a class="page-link" href="<%= baseHref %>page=<%= Math.max(1, current-1) %>">Previous</a>
      </li>
      <% for (let p = 1; p <= totalPages; p++) { %>
        <li class="page-item <%= p === current ? 'active' : '' %>">
          <a class="page-link" href="<%= baseHref %>page=<%= p %>"><%= p %></a>
        </li>
      <% } %>
      <li class="page-item <%= current >= totalPages ? 'disabled' : '' %>">
        <a class="page-link" href="<%= baseHref %>page=<%= Math.min(totalPages, current+1) %>">Next</a>
      </li>
    </ul>
  </nav>
<% } %>

